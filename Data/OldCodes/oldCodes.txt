    def getScoreList(self, list ):
        returnList = []
        for curBinCount in range(self.maxFeatureCount-2, self.minFeatureCount-1, -1):
            curBinIndex = curBinCount - self.minFeatureCount
            lookUpList = list[-curBinCount:]
            score = 0.0
            curKey = keyMaker(lookUpList)
            if curKey in self.scoreMap:
                score = self.scoreMap[curKey]
                returnList.append(score)
                self.notMissCount += 1
                continue
            self.missCount += 1
            if lookUpList[-1] < 0.0:
                score = self.__getScoreForButtomElement(lookUpList, self.inputs[curBinIndex+1].getSorter(), curBinIndex + 1)
            elif lookUpList[-1] > 0.0:
                score = self.__getScoreForRisingElement(lookUpList, self.inputs[curBinIndex].getSorter(), curBinIndex + 1)
            self.scoreMap[curKey] = score

            returnList.append(score)

        return returnList

    def setScore( self, transIndex, peakIndex, score ):
        self.transactionHelperList[transIndex].peakHelperList[peakIndex].score = score


    def getScore(self, list ):
        for curBinCount in range(self.maxFeatureCount-2, self.minFeatureCount-1, -1):
            curBinIndex = curBinCount - self.minFeatureCount
            lookUpList = list[-curBinCount:]

            score = 0.0
            curKey = keyMaker(lookUpList)
            if curKey in self.scoreMap:
                score = self.scoreMap[curKey]
            else:
                if lookUpList[-1] < 0.0:
                    score = self.__getScoreForButtomElement(lookUpList, self.inputs[curBinIndex+1].getSorter(), curBinIndex + 1)
                elif lookUpList[-1] > 0.0:
                    score = self.__getScoreForRisingElement(lookUpList, self.inputs[curBinIndex].getSorter(), curBinIndex + 1)
                self.scoreMap[curKey] = score

            if abs(score) > 6.0:
                return score
        return 0.0


#    for peakHelper in transHelper.peakHelperList:
#        scoreList = self.getScoreList(peakHelper.inputRise)
#        peakHelper.scoreList = scoreList
#   print("Finalizing index", counter, " Not missed " , self.notMissCount, " missed ", self.missCount)



    def __getFactor(self, val, curIndex ):
        ngramFactor = lambda x :  0.8 + 0.15*x + 0.05*x*x
        if val < 4.0:
            return 0.5 * ngramFactor(curIndex)
        elif val < 5.0:
            return 0.6 * ngramFactor(curIndex)
        elif val < 7.5:
            return 0.8 * ngramFactor(curIndex)
        elif val < 10.0:
            return 1.0 * ngramFactor(curIndex)
        elif val < 15.0:
            return 1.5 * ngramFactor(curIndex)
        elif val < 20.0:
            return 2.0 * ngramFactor(curIndex)
        elif val < 30.0:
            return 3.0 * ngramFactor(curIndex)
        else:
            return 5.0 * ngramFactor(curIndex)

    def __getScoreForButtomElement(self, oneSampleNBin, nPlusOneCompleteInputSorter, curIndex):
        score = 0.0
        firstElem = oneSampleNBin[0]
        factor = self.__getFactor(abs(firstElem), curIndex)
        startIndex = nPlusOneCompleteInputSorter.getIndex( firstElem - factor)
        endIndex = nPlusOneCompleteInputSorter.getIndex( firstElem + factor)
        #print(firstElem, " ",curIndex , " ", startIndex, " ", endIndex, " ",  len(nPlusOneCompleteInputSorter.sortedPriceList), )
        for index in  range(startIndex, endIndex):
            elemList = nPlusOneCompleteInputSorter.sortedPriceList[index]
            score += self.__getScoreForButtom(oneSampleNBin, elemList, curIndex)
        return score

    def __getScoreForRisingElement(self, oneSampleNBin, nBinCompleteInputSorter, curIndex):
        score = 0
        firstElem = oneSampleNBin[0]
        factor = self.__getFactor(abs(firstElem), curIndex)
        startIndex = nBinCompleteInputSorter.getIndex( firstElem - factor)
        endIndex = nBinCompleteInputSorter.getIndex( firstElem + factor)

        for index in  range(startIndex, endIndex):
            elemList = nBinCompleteInputSorter.sortedPriceList[index]
            score += self.__getScoreForRising(oneSampleNBin, elemList, curIndex)
        return score


    def __checkPositivitySingleVal(self, lhs, rhs, curIndex):
        ngramFactor = lambda x :  0.8 + 0.15*x + 0.05*x*x
        if lhs * rhs < 0:
            return False
        diff = abs(lhs - rhs)
        lshAbs = abs(lhs)
        if lshAbs < 4.0:
            return diff < 0.5 * ngramFactor(curIndex)
        elif lshAbs < 5.0:
            return diff < 0.6 * ngramFactor(curIndex)
        elif lshAbs < 7.5:
            return diff < 0.8 * ngramFactor(curIndex)
        elif lshAbs < 10.0:
            return diff < 1.0 * ngramFactor(curIndex)
        elif lshAbs < 15.0:
            return diff < 1.5 * ngramFactor(curIndex)
        elif lshAbs < 20.0:
            return diff < 2.0 * ngramFactor(curIndex)
        elif lshAbs < 30.0:
            return diff < 3.0 * ngramFactor(curIndex)
        else:
            return diff < 5.0 * ngramFactor(curIndex)

    def __getScoreForRising(self, oneSampleNBin, oneSampleOtherBin, curIndex):

        if not self.__checkPositivitySingleVal(oneSampleNBin[0],oneSampleOtherBin[0], curIndex):
            return False
        isAllValid = all(
            [self.__checkPositivitySingleVal(x, y, curIndex) for x, y in zip(oneSampleNBin[:-1], oneSampleOtherBin[:-1])])
        if not isAllValid:
            return 0.0
        diff = oneSampleOtherBin[-1] - oneSampleNBin[-1]
        if diff < -1.5:
            return 0.0

        return self.__clampVal( diff - 4.0 )

    def __getScoreForButtom(self, oneSampleNBin, oneSampleNPluseOneBin, curIndex):
        if not self.__checkPositivitySingleVal(oneSampleNBin[0],oneSampleNPluseOneBin[0], curIndex):
            return False
        isAllValid = all([self.__checkPositivitySingleVal(x, y, curIndex) for x, y in zip(oneSampleNBin[:-1], oneSampleNPluseOneBin[:-2])])
        if not isAllValid:
            return 0.0
        diff = oneSampleNBin[-1] - oneSampleNPluseOneBin[-2]
        if diff < -1.5:
            return 0.0
        elif diff < 1.5:
            return self.__clampVal(oneSampleNPluseOneBin[-1] - abs(diff))#Positive effect
        else:
            return -self.__clampVal(diff)#Negative effect

    def __clampVal(self, val ):
        return min(5.0, max(val, -5.0))



    def keyMaker(list):
        key = 0
        for index in range(len(list)):
            key += int(min(999, int(abs(list[index]) * 10))* pow(1000, index))
        if list[0] < 0.0:
          key *= -1
        return key


scikit.py:

extraFolderPath = os.path.abspath(os.getcwd()) + "/Data/ExtraData/"


#InputManager

import Input as input
import numpy as np
import json
import TransactionHelper
import MarketStateManager


class ReShapeManager:
    maxFeatureCount = 8
    minFeatureCount = 3

    def __init__( self, transactionParams ):
        self.inputs = []
        for curBinCount in range(self.minFeatureCount, self.maxFeatureCount):
            self.inputs.append( input.ReShapedInput(curBinCount) )
        self.transactionHelperList = []
        self.transactionParams = transactionParams
        self.marketState = MarketStateManager.MarketStateManager()
        for i in range(len(transactionParams)):
            self.transactionHelperList.append(TransactionHelper.TransactionAnalyzer(transactionParams[i].gramCount))

    def ClearMemory(self):
        print("Releasing memory")
        del self.transactionHelperList
        for input in self.inputs:
            del input.inputRise
            del input.inputTime

    def addNewFileData( self, jsonDictionary, isFinalize ):
        for jsonElem in jsonDictionary:
            self.addANewCurrency(jsonElem, isFinalize)

    def addANewCurrency( self, jsonIn, isFinalize ):
        peakData = jsonIn["peak"]
        riseAndTimeStrList = peakData.split(",")
        if len(riseAndTimeStrList) < 2:
            return

        transactionData = jsonIn["transactionList"]
        peakSize = len(riseAndTimeStrList)
        transactionDataSize = len(transactionData)
        if peakSize != transactionDataSize:
            print(peakSize , " ", transactionDataSize)
            return
        riseAndTimeList = []
        skipIndexes = []
        for x in range(peakSize):
            riseMinute = input.RiseMinute(riseAndTimeStrList[x])
            if len(riseAndTimeList) > 0 and riseAndTimeList[-1].rise * riseMinute.rise > 0:
                skipIndexes.append(x-1)
                riseAndTimeList[-1] = riseMinute
            else:
                riseAndTimeList.append(riseMinute)

        newTransParams = []
        for i in range(len(transactionData)):
            if i in skipIndexes:
                continue
            newTransParams.append(transactionData[i])

        transactionData = newTransParams

        startIndex = self.transactionHelperList[-1].GetStartIndex(transactionData)
        if startIndex == -1:
            return
        self.addLinePeaks(riseAndTimeList[startIndex:])

        for i in range(len(self.transactionParams)):
            transParam = self.transactionParams[i]
            self.transactionHelperList[i].AddCurrency( transactionData, riseAndTimeList,transParam.msec,
                                                       transParam.gramCount,self.maxFeatureCount, self.marketState if i == 0 else None, isFinalize )



    def addLinePeaks(self, riseAndTimeList):
        for curBinCount in range(self.minFeatureCount, self.maxFeatureCount):
            curBinIndex = curBinCount - self.minFeatureCount
            if len(riseAndTimeList) >= curBinCount:
                self.inputs[curBinIndex].concanate(riseAndTimeList)

    def finalize(self):
        counter = 0
        self.marketState.sort()
        for input in self.inputs:
            input.inputTime.clear()

        for transHelper in self.transactionHelperList:
            for peakHelper in transHelper.peakHelperList:
                peakHelper.SetMarketState( self.marketState.getState(peakHelper.peakTimeSeconds) )

        for transHelper in self.transactionHelperList:
            counter += 1
            transHelper.Finalize(counter)

    def toFeaturesNumpy(self, binCount):
        curBinIndex = binCount - self.minFeatureCount
        return self.inputs[curBinIndex].toNumpy()

    def toTransactionCurves(self, index):
        return self.transactionHelperList[index].toTransactionCurves()

    def toResultsNumpy(self, binCount):
        curBinIndex = binCount - self.minFeatureCount
        newArray = list(map ( lambda elem: 0.0 if elem < 6.0 else 1.0, self.scoreList[curBinIndex] ))
        return np.array(newArray)

    def toTestResultNumpy(self, xTest, gramCount):
        output = []
        for x in xTest:
            output.append( 1 if x[gramCount-1] < 0.0 else 0)
        return np.array(output)

    def toTransactionFeaturesNumpy(self, index ):
        return self.transactionHelperList[index].toTransactionNumpy()

    def toTransactionResultsNumpy(self, index):
        return self.transactionHelperList[index].toTransactionResultsNumpy()


INput.py

import numpy as np
import itertools
import bisect

class RiseMinute:
    def __init__(self, riseAndTimeStr):
        riseAndTimeStrPair = riseAndTimeStr.split("|")
        self.rise = float(riseAndTimeStrPair[0])
        self.time = riseAndTimeStrPair[1]

    def __repr__(self):
        return "Rise:%f,Time:%s" % (self.rise, self.time)

class InputRiseSorter:

    def __init__(self, featureCount ):
        self.sortedPriceList = []
        self.sortedPriceKeys = []
        self.featureCount = featureCount

    def add(self,inputRise):
        self.sortedPriceList = inputRise
        self.sortedPriceList = sorted(self.sortedPriceList, key=lambda l: l[0])
        self.sortedPriceKeys = [elem[0] for elem in self.sortedPriceList]

    def getIndex(self, elem):
        return bisect.bisect(self.sortedPriceKeys, elem)


class ReShapedInput:

    def __init__(self, featureCount ):
        self.inputRise = []
        self.inputSorter = InputRiseSorter(featureCount)
        self.inputTime = []
        self.featureCount = featureCount

    def concanate(self, riseAndTimeList):
        riseList = list(map( lambda x: float(x.rise), riseAndTimeList ))
        newList = list(map(lambda x: riseList[x:x+self.featureCount],
                                  range( len( riseList ) + 1 - self.featureCount)))

        timeList = list(map( lambda x: float(x.time), riseAndTimeList ))
        newTimeList = list(map(lambda x: timeList[x:x+self.featureCount],
                                  range( len( timeList ) + 1 - self.featureCount)))

        self.inputRise.extend(newList)
        self.inputTime.extend(newTimeList)

    def getSorter(self):
        if ( len(self.inputSorter.sortedPriceKeys) == 0 ):
            self.inputSorter.add(self.inputRise)
            self.inputRise.clear()
        return self.inputSorter

TransactionHelper:

import json
import datetime
import bisect
import copy

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import MarketStateManager

ExtraFeatureCount = 0
ExtraPerDataInfo = 2 #MaxPriceMinPriceRatio
ExtraLongPriceStateCount = 8
ExtraMarketStateCount = 6
ExtraPeakRatioCount = 2





def GetMaxMinWithTime(riseMinuteList, curIndex, targetTime):
    totalTime = 0
    ratioToCurVal = 1.0
    maxRatio = 0.0
    minRatio = 100.0
    count = 0
    for index in range(curIndex, 0, -1):
        time = float(riseMinuteList[index].time)
        rise = float(riseMinuteList[index].rise)

        if totalTime > targetTime:
            if count == 0:
                return [1.0, 1.0]
            else:
                return [min(1.0,minRatio), max(1.0,maxRatio)]
        count += 1
        ratioToCurVal -= rise / 100.0
        #print(totalTime, " ", rise, " ", ratioToCurVal, " ", minRatio, " ", maxRatio)

        maxRatio = max(ratioToCurVal, maxRatio)
        minRatio = min(ratioToCurVal, minRatio)
        totalTime += time
    if count == 0:
        return [1.0, 1.0]
    else:
        return [min(1.0,minRatio), max(1.0,maxRatio)]


class TransactionData:
    def __init__(self):
        self.totalBuy = 0.0
        self.totalSell = 0.0
        self.transactionBuyCount = 0.0
        self.totalTransactionCount = 0.0
        self.score = 0
        self.timeInSecs = 0
        self.firstPrice = 0.0
        self.lastPrice = 0.0

    def __repr__(self):
        return "TotalBuy:%f,TotalSell:%f,TransactionCount:%f,Score:%f,LastPrice:%f,Time:%d" % (
        self.totalBuy, self.totalSell,
        self.transactionBuyCount, self.score, self.lastPrice, self.timeInSecs)

    # "m": true, "l": 6484065,"M": true,"q": "44113.00000000","a": 5378484,"T": 1591976004949,"p": "0.00000225","f": 6484064
    def AddData(self, jsonIn):
        isSell = jsonIn["m"]
        power = float(jsonIn["q"]) * float(jsonIn["p"])
        if self.firstPrice == 0.0:
            self.firstPrice = float(jsonIn["p"])
        self.lastPrice = float(jsonIn["p"])
        self.totalTransactionCount += 1
        if not isSell:
            self.transactionBuyCount += 1
            self.totalBuy += power
        else:
            self.totalSell += power

    def SetTime(self, timeInSecs):
        self.timeInSecs = timeInSecs

    def Reset(self):
        self.totalBuy = 0.0
        self.totalSell = 0.0
        self.transactionBuyCount = 0.0
        self.totalTransactionCount = 0.0
        self.score = 0
        self.timeInSecs = 0
        self.firstPrice = 0.0
        self.lastPrice = 0.0


class TransactionPattern:
    def __init__(self):
        self.transactionBuyList = []
        self.transactionSellList = []
        self.transactionBuyPowerList = []
        self.transactionSellPowerList = []
        self.totalBuy = 0.0
        self.totalSell = 0.0
        self.transactionCount = 0.0
        self.score = 0.0
        self.totalTransactionCount = 0
        self.timeDiffInSeconds = 0
        self.priceMaxRatio = 1.0
        self.priceMinRatio = 1.0

    def Append(self, dataList, peakTime):

        if len(dataList) > 0:
            priceList = list(map(lambda x: x.lastPrice, dataList))
            self.priceMaxRatio = dataList[-1].lastPrice / max(priceList)
            self.priceMinRatio = dataList[-1].lastPrice / min(priceList)

        for elem in dataList:
            self.transactionBuyList.append(elem.transactionBuyCount)
            self.transactionSellList.append(elem.totalTransactionCount - elem.transactionBuyCount)
            self.transactionBuyPowerList.append(elem.totalBuy)
            self.transactionSellPowerList.append(elem.totalSell)
            self.totalBuy += elem.totalBuy
            self.totalSell += elem.totalSell
            self.transactionCount += elem.transactionBuyCount
            self.totalTransactionCount += elem.totalTransactionCount
        self.timeDiffInSeconds = dataList[-1].timeInSecs - peakTime

    def GetFeatures(self):
        returnList = []
        for i in range(len(self.transactionBuyList)):
            returnList.append(self.transactionBuyList[i])
            returnList.append(self.transactionSellList[i])
            returnList.append(self.transactionBuyPowerList[i])
            returnList.append(self.transactionSellPowerList[i])
        #buyCount = sum(self.transactionBuyList)
        #sellCount = sum(self.transactionSellList)
        #returnList.append(buyCount)
        #returnList.append(sellCount)
        return returnList

    def __repr__(self):
        return "list:%s,timeDiff:%d,totalBuy:%f,totalSell:%f,transactionCount:%f,score:%f" % (
            str(self.transactionBuyList), self.timeDiffInSeconds,
            self.totalBuy, self.totalSell,
            self.transactionCount, self.score)


class TransactionPeakHelper:
    percent = 0.01
    stopTime = 25
    PeakFeatureCount = ExtraFeatureCount + 3 + ExtraLongPriceStateCount + ExtraMarketStateCount + ExtraPeakRatioCount
    LowestTransactionCount = 1
    AvarageCaseCounter = 0

    def __init__(self, jsonIn, lowestAcceptedTotalTransactionCount, acceptedTotalTransactionLimit,
                 mseconds, isBottom, curveVal, curveTime, riseList, timeList, maxMinList, peakRatios):
        self.mseconds = mseconds
        totalSize = len(jsonIn)
        self.patternList = []
        self.mustBuyList = []
        self.badPatternList = []
        self.dataList = []
        self.isBottom = isBottom
        self.curveVal = curveVal
        self.curveTime = curveTime
        self.inputRise = riseList
        self.inputTime = [float(x) for x in timeList]
        self.scoreList = []
        self.maxMinList = maxMinList
        self.marketStates = []
        self.peakRatios = peakRatios
        self.marketState = 1
        self.isFinalize = True
        self.lowestAcceptedTotalTransactionCount = lowestAcceptedTotalTransactionCount
        self.acceptedTotalTransactionLimit = acceptedTotalTransactionLimit
        self.isJumpInWindow = False
        prices = list(map(lambda x: float(x["p"]), jsonIn))
        priceLen = len(prices)
        if priceLen == 0:
            return

        if isBottom:
            self.peakIndex = prices.index(min(prices))
        else:
            self.peakIndex = prices.index(max(prices))



        self.peakVal = float(jsonIn[self.peakIndex]["p"])
        self.peakTimeSeconds = int(jsonIn[self.peakIndex]["T"]) // 1000

        self.jumpIndex = len(prices) - 1
        for index in range(len(prices[self.peakIndex:])):
            curPrice = prices[self.peakIndex + index]
            if isBottom and curPrice/self.peakVal > 1.015:
                self.jumpIndex = self.peakIndex + index
                self.isJumpInWindow = True
            if not isBottom and self.peakVal/curPrice < 1.015:
                self.jumpIndex = self.peakIndex + index
                self.isJumpInWindow = True

        self.jumpTimeSecond = int(jsonIn[self.peakIndex]["T"]) // 1000
        self.__DivideDataInSeconds(jsonIn)

    def GetPeakFeatures(self):
        return self.maxMinList + self.marketStates + self.inputTime[-3:] + self.peakRatios
            #self.maxMinList #+ self.marketStates + self.inputTime[-3:] + self.scoreList + self.peakRatios

    # TransactionData, self.totalBuy = 0.0, self.totalSell = 0.0,self.transactionCount = 0.0,self.score = 0
    def AssignScores(self, ngramCount):
        lenArray = len(self.dataList)
        if lenArray == 0:
            return
        # print(lenArray, self.dataList)
        for x in range(0, lenArray):
            self.__AppendToPatternList(ngramCount, x, lenArray)
        del self.dataList

    def __AppendToPatternList(self, ngramCount, curIndex, lenArray):
        startBin = curIndex + 1 - ngramCount
        endBin = curIndex + 1
        if startBin < 0 or endBin > lenArray:
            return

        pattern = TransactionPattern()
        pattern.Append(self.dataList[startBin:endBin], self.peakTimeSeconds)
        if pattern.totalTransactionCount < self.lowestAcceptedTotalTransactionCount:
            if pattern.totalBuy+pattern.totalSell < self.acceptedTotalTransactionLimit:
                return

        if self.__GetCategory(curIndex) == 0:
            self.mustBuyList.append(pattern)
            # self.patternList.append(pattern)
        elif self.__GetCategory(curIndex) == 1:
            self.patternList.append(pattern)
        elif self.__GetCategory(curIndex) == 2:
            self.badPatternList.append(pattern)


    def __GetCategory(self, curIndex):
        if not self.isJumpInWindow:
            return -1
        price = self.dataList[curIndex].lastPrice
        firstPrice = self.dataList[curIndex].firstPrice
        time = self.dataList[curIndex].timeInSecs

        if self.isBottom:
            if price < self.peakVal * 1.01:
                return 1  # Good
            elif price < self.peakVal * 1.015 and time < self.peakTimeSeconds:
                return 1  # Good
        else:
            if price > self.peakVal * 0.98:
                return 2
            if price > self.peakVal * 0.97 and time > self.peakTimeSeconds:
                return 2
        return -1

    def SetMarketState(self, marketStates):
        self.marketStates = marketStates
        for index in range(len(marketStates) // 2):
            ratio = marketStates[index] / max(2, marketStates[index + 1])
            if ratio < 0.66 and marketStates[index + 1] > 2:
                self.marketState = 0
            elif ratio > 2.0:
                self.marketState = 2
        self.marketState = 1

    def __DivideDataInSeconds(self, jsonIn):
        transactionData = TransactionData()
        lastEndTime = 0
        stopMiliSecs = int(jsonIn[-1]["T"])
        for x in range(len(jsonIn)):
            curElement = jsonIn[x]
            curMiliSecs = int(curElement["T"])
            if x == 0:
                lastEndTime = curMiliSecs + self.mseconds

            if curMiliSecs > lastEndTime:
                copyData = copy.deepcopy(transactionData)
                self.dataList.append(copyData)
                transactionData.Reset()
                transactionData.AddData(curElement)
                transactionData.SetTime(curMiliSecs // 1000)
                lastEndTime += self.mseconds
                while True:
                    if curMiliSecs > lastEndTime and lastEndTime < stopMiliSecs:
                        lastEndTime += self.mseconds
                        emptyData = TransactionData()
                        emptyData.SetTime(lastEndTime // 1000)
                        emptyData.lastPrice = copyData.lastPrice
                        self.dataList.append(emptyData)
                    else:
                        break
            else:
                transactionData.AddData(curElement)
        self.dataList.append(copy.deepcopy(transactionData))


class TransactionAnalyzer:
    TransactionCountPerSecBase = 20
    TransactionCountPerSecIncrease = 0.5
    TransactionLimitPerSecBase = 1.0
    TransactionLimitPerSecBaseIncrease = 0.02

    def __init__(self, ngrams):
        self.mustBuyList = []
        self.patternList = []
        self.badPatternList = []
        self.peakHelperList = []
        self.ngrams = ngrams

    def GetStartIndex(self, jsonIn):
        for index in range(len(jsonIn)):
            if len(jsonIn[index]) == 0:
                continue
            return index
        return -1

    def AddCurrency(self, jsonIn, riseMinuteList, msec, ngrams, maxGrams, marketState, isFinalize):
        if len(jsonIn) < 8:
            return

        for index in range(len(jsonIn)):
            isBottom = riseMinuteList[index].rise < 0.0
            if len(jsonIn[index]) == 0:
                continue
            if index < 8:
                continue

            indexPlusOne = index + 1
            riseList = list(map(lambda x: x.rise, riseMinuteList[index - maxGrams:indexPlusOne]))
            timeList = list(map(lambda x: x.time, riseMinuteList[index - maxGrams:indexPlusOne]))
            if len(riseList) < maxGrams:
                riseList = [0.0] * (maxGrams - len(riseList)) + riseList
                timeList = [0.0] * (maxGrams - len(timeList)) + timeList

            #6 + 7 + 9 + 13 + 21 + 37 + 69
            maxMinList = GetMaxMinWithTime(riseMinuteList, index, 6*60) + GetMaxMinWithTime(riseMinuteList, index, 24*60)
            if ExtraLongPriceStateCount >= 6:
                maxMinList += GetMaxMinWithTime(riseMinuteList, index, 48*60)
            if ExtraLongPriceStateCount == 8:
                maxMinList += GetMaxMinWithTime(riseMinuteList, index, 72*60)
            if maxMinList[0] < 0.75 or maxMinList[2] < 0.55 or maxMinList[4] < 0.45: #or maxMinList[6] < 0.4:
                continue



            #print(maxMinList)
            totalSec = msec * ngrams / 1000
            lowestTransaction = TransactionAnalyzer.TransactionCountPerSecBase + TransactionAnalyzer.TransactionCountPerSecIncrease * totalSec
            acceptedTransLimit = TransactionAnalyzer.TransactionLimitPerSecBase + TransactionAnalyzer.TransactionLimitPerSecBaseIncrease * totalSec

            riseCompleteList = list(map( lambda x: x.rise, riseMinuteList))
            peakRatios = GetPeaksRatio(riseCompleteList, index)

            peakHelper = TransactionPeakHelper(jsonIn[index], lowestTransaction, acceptedTransLimit, msec, isBottom,
                                               riseMinuteList[index].rise, riseMinuteList[index].time, riseList,
                                               timeList,maxMinList,peakRatios)
            peakHelper.isFinalize = isFinalize

            peakHelper.AssignScores(ngrams)

            if marketState is not None:
                marketState.add(peakHelper)
            self.peakHelperList.append(peakHelper)

    def Finalize(self, index):
        for peak in self.peakHelperList:
            self.__MergeInTransactions(peak)
            del peak
        #self.Print(index)

    def toTransactionNumpy(self):
        badCount = len(self.badPatternList)
        goodCount = len(self.patternList)
        #mustBuyCount = len(self.mustBuyList)
        totalGoodCount = goodCount #+ mustBuyCount
        #if badCount / totalGoodCount > 3:
        #    self.badPatternList = self.badPatternList[-(totalGoodCount * 3):]
        allData = np.concatenate( (self.patternList, self.badPatternList), axis=0)
        print("Good count: ", goodCount, " Bad Count: ", badCount)
        return allData

    def toTransactionResultsNumpy(self):
        badCount = len(self.badPatternList)
        goodCount = len(self.patternList)
        #mustBuyCount = len(self.mustBuyList)
        print("Good count: ", goodCount, " Bad Count: ", badCount)
        #mustBuyResult = [2] * mustBuyCount
        goodResult = [1] * goodCount
        badResult = [0] * len(self.badPatternList)
        returnPatternList = goodResult + badResult
        return returnPatternList

    def Print(self, index):

        #mustBuyList = np.array(self.mustBuyList)
        buyList = np.array(self.patternList)
        badList = np.array(self.badPatternList)

        columnNames = "PriceDiffMin,PriceDiffMax,6HMin,6HMax,24HMin,24HMax,48HMin,48HMax,72HMin,72HMax," \
                      "1MinsDowns,1MinsUp,5MinsDown,5MinsUp,Time1,Time2,Time3," \
                      "Score1,Score2,Score3,Score4"
        print("Printing index: ", index )
        colNameList = columnNames.split(",")
        for i in range(TransactionPeakHelper.PeakFeatureCount):
            a = {'Good': buyList[:, -(i + 1)],
                 'Bad': badList[:, -(i + 1)]}
            df = pd.DataFrame.from_dict( a, orient='index')
            df = df.transpose()
            df.plot.box()
            #mustBuyLegend = str(np.quantile(mustBuyList[:, -(i + 1)], 0.1)) + "," + str(np.quantile(mustBuyList[:, -(i + 1)], 0.5)) + "," + str(np.quantile(mustBuyList[:, -(i + 1)], 0.9))
            buyLegend = str(np.quantile(buyList[:, -(i + 1)], 0.1)) + "," + str(np.quantile(buyList[:, -(i + 1)], 0.5)) + "," + str(np.quantile(buyList[:, -(i + 1)], 0.9))
            badLegend = str(np.quantile(badList[:, -(i + 1)], 0.1)) + "," + str(np.quantile(badList[:, -(i + 1)], 0.5)) + "," + str(np.quantile(badList[:, -(i + 1)], 0.9))
            print(str(index) ,"_" , str(i) , "_" , colNameList[-(i+1)], "_" , buyLegend , " ", badLegend)
            plt.savefig('Plots/' + str(index) + "_" + str(i) + "_" + colNameList[-(i+1)] + '_box.pdf')
            plt.cla()
            plt.clf()
        for i in range(self.ngrams*4):
            a = {'Good': buyList[:, i],
                 'Bad': badList[:, i ]}
            df = pd.DataFrame.from_dict( a, orient='index')
            df = df.transpose()
            df.plot.box()
            #mustBuyLegend = str(np.quantile(mustBuyList[:, i ], 0.1)) + "," + str(np.quantile(mustBuyList[:, i ], 0.5)) + "," + str(np.quantile(mustBuyList[:, i ], 0.9))
            buyLegend = str(np.quantile(buyList[:, i], 0.1)) + "," + str(np.quantile(buyList[:, i], 0.5)) + "," + str(np.quantile(buyList[:, i], 0.9))
            badLegend = str(np.quantile(badList[:, i], 0.1)) + "," + str(np.quantile(badList[:, i], 0.5)) + "," + str(np.quantile(badList[:, i ], 0.9))
            print(str(index) ,"_" , str(i) , "_transac_", buyLegend , " ", badLegend)
            plt.savefig('Plots/' + str(index) + "_" + str(i) + "_transactions_box.pdf")
            plt.cla()
            plt.clf()
        plt.close()

    def __PrintImpl(self, inList, extraMessage):
        peakPatternValues = np.array(inList)
        print(extraMessage," len: ", len(peakPatternValues), " mean ", np.mean(peakPatternValues, axis=0))

    def __MergeInTransactions(self, transactionPeakHelper):
        # TransactionData, self.totalBuy = 0.0, self.totalSell = 0.0,self.transactionCount = 0.0,self.score = 0

        #if transactionPeakHelper.scoreList[0] > -10 or transactionPeakHelper.scoreList[1] < -25 or transactionPeakHelper.scoreList[2] < -50 or transactionPeakHelper.scoreList[3] < -75:
         #   return
        if transactionPeakHelper.isFinalize == False:
            return
        for pattern in transactionPeakHelper.patternList:
            self.patternList.append(pattern.GetFeatures() + transactionPeakHelper.GetPeakFeatures())

        for pattern in transactionPeakHelper.mustBuyList:
            self.mustBuyList.append(pattern.GetFeatures() + transactionPeakHelper.GetPeakFeatures())

        for pattern in transactionPeakHelper.badPatternList:
            self.badPatternList.append(pattern.GetFeatures() + transactionPeakHelper.GetPeakFeatures())


folderPath = os.path.abspath(os.getcwd()) + "/Data/CompleteData/"
def compareInt(x,y):
    return int(x.split("_")[1]) - int(y.split("_")[1])

onlyfiles = [f for f in listdir(folderPath) if isfile(join(folderPath, f))]
onlyfiles = list(sorted( onlyfiles, key=functools.cmp_to_key(compareInt) ))
onlyfiles = list(map( lambda x:  folderPath+x, onlyfiles))
trainingReshaper = ReadFileAndCreateReshaper(onlyfiles[0])
for fileName in onlyfiles:
    if fileName == onlyfiles[0]:
        continue
    AddExtraToShaper(fileName, trainingReshaper)


print("All added now scores")
sys.stdout.flush()

#trainingReshaper.transactionHelper.Print()
a = datetime.datetime.now()
trainingReshaper.finalize()
b = datetime.datetime.now()
elapsedTime = b - a
print("Assigned scores ", elapsedTime.seconds)
sys.stdout.flush()
extraDataManager = extraDataMan.ExtraDataManager(extraFolderPath,transParamList, trainingReshaper.marketState)


def ReadFileAndCreateReshaper( fileName ):
    print("Reading ", fileName )
    file = open(fileName, "r")
    jsonDictionary = json.load(file)

    reshaper = inputManager.ReShapeManager(transParamList)
    reshaper.addNewFileData(jsonDictionary, True)

    file.close()
    return  reshaper

def AddExtraToTuneShaper ( fileName, shaper):
    jsonDictionary = {}
    try:
        jsonDictionary = json.load(open(os.path.abspath(os.getcwd()) + "/Data/TuneData/" + fileName, "r"))
        shaper.addNewFileData(jsonDictionary)
    except:
        print("There was a exception in ", fileName)

def ReadFilesInTuneFolder( folderPath, reshaperTuner ):
    onlyfiles = [f for f in listdir(folderPath) if isfile(join(folderPath, f))]
    for fileName in onlyfiles:
        print(" Reading for tuner: ", fileName)
        AddExtraToTuneShaper(fileName, reshaperTuner)

def AddExtraToShaper ( fileName, shaper):
    print("Reading ", fileName, " ")
    file = open(fileName, "r")
    jsonDictionary = {}

    try:
        jsonDictionary = json.load(file)
        shaper.addNewFileData(jsonDictionary, True)
    except:
        print("There was a exception in ", fileName)
    file.close()




class TransactionPeakHelper:
    def __init__(self, jsonIn, transactionParam, riseList, timeList):
        self.patternList = []
        self.mustBuyList = []
        self.badPatternList = []
        self.dataList = []
        self.inputRise = riseList
        self.inputTime = [float(x) for x in timeList]
        self.marketStates = []
        self.isFinalize = True

        totalSec = transactionParam.msec * transactionParam.gramCount / 1000
        self.lowestTransaction = SuddenChangeHandler.TransactionCountPerSecBase + SuddenChangeHandler.TransactionCountPerSecIncrease * totalSec
        self.acceptedTransLimit = SuddenChangeHandler.TransactionLimitPerSecBase + SuddenChangeHandler.TransactionLimitPerSecBaseIncrease * totalSec
        self.buyTransLimit = SuddenChangeHandler.TransactionBuyLimit + SuddenChangeHandler.TransactionLimitPerSecBaseIncrease * totalSec

        self.isJumpInWindow = False
        prices = list(map(lambda x: float(x["p"]), jsonIn))
        priceLen = len(prices)
        if priceLen == 0:
            return

        self.isBottom = True if riseList[-1] < 0.0 else False

        if self.isBottom:
            self.peakIndex = prices.index(min(prices))
        else:
            self.peakIndex = prices.index(max(prices))

        self.peakVal = float(jsonIn[self.peakIndex]["p"])
        self.peakTimeSeconds = int(jsonIn[self.peakIndex]["T"]) // 1000
        self.__DivideDataInSeconds(jsonIn)
        self.__AssignScores()

    def GetPeakFeatures(self):
        return []

    # TransactionData, self.totalBuy = 0.0, self.totalSell = 0.0,self.transactionCount = 0.0,self.score = 0
    def __AssignScores(self):
        lenArray = len(self.dataList)
        if lenArray == 0:
            return
        # print(lenArray, self.dataList)
        for x in range(0, lenArray):
            self.__AppendToPatternList(self.transactionParam.gramCount, x, lenArray)
        del self.dataList

    def __AppendToPatternList(self, ngramCount, curIndex, lenArray):
        startBin = curIndex + 1 - ngramCount
        endBin = curIndex + 1
        if startBin < 0 or endBin > lenArray:
            return

        pattern = TransactionBasics.TransactionPattern()
        pattern.Append(self.dataList[startBin:endBin], self.peakTimeSeconds)
        if pattern.totalTransactionCount < self.lowestAcceptedTotalTransactionCount:
            if pattern.totalBuy+pattern.totalSell < self.acceptedTotalTransactionLimit:
                return

        if self.__GetCategory(curIndex) == 0:
            self.mustBuyList.append(pattern)
        elif self.__GetCategory(curIndex) == 1:
            self.patternList.append(pattern)
        elif self.__GetCategory(curIndex) == 2:
            self.badPatternList.append(pattern)


    def __GetCategory(self, curIndex):
        if not self.isJumpInWindow:
            return -1
        price = self.dataList[curIndex].lastPrice
        time = self.dataList[curIndex].timeInSecs

        if self.isBottom:
            if price < self.peakVal * 1.005:
                return 1  # Good
            if price > self.peakVal * 0.96 and time < self.peakTimeSeconds:
                return 2  # Bad
        else:
            if price < self.peakVal * 0.96 and time < self.peakTimeSeconds:
                return 1  # Good
            if price > self.peakVal * 0.995:
                return 2
        return -1

    def __DivideDataInSeconds(self, jsonIn):
        transactionData = TransactionBasics.TransactionData()
        lastEndTime = 0
        stopMiliSecs = int(jsonIn[-1]["T"])
        for x in range(len(jsonIn)):
            curElement = jsonIn[x]
            curMiliSecs = int(curElement["T"])
            if x == 0:
                lastEndTime = curMiliSecs + self.mseconds

            if curMiliSecs > lastEndTime:
                copyData = copy.deepcopy(transactionData)
                self.dataList.append(copyData)
                transactionData.Reset()
                transactionData.AddData(curElement)
                transactionData.SetTime(curMiliSecs // 1000)
                lastEndTime += self.mseconds
                while True:
                    if curMiliSecs > lastEndTime and lastEndTime < stopMiliSecs:
                        lastEndTime += self.mseconds
                        emptyData = TransactionBasics.TransactionData()
                        emptyData.SetTime(lastEndTime // 1000)
                        emptyData.lastPrice = copyData.lastPrice
                        self.dataList.append(emptyData)
                    else:
                        break
            else:
                transactionData.AddData(curElement)
        self.dataList.append(copy.deepcopy(transactionData))


    def FeedOldPeakData(self):
        jumpDataFolderPath = os.path.abspath(os.getcwd()) + "/Data/CompleteData/"
        onlyJumpFiles = [f for f in listdir(jumpDataFolderPath) if isfile(join(jumpDataFolderPath, f))]
        for fileName in onlyJumpFiles:
            print("Reading Jump", jumpDataFolderPath + fileName, " ")
            file = open(jumpDataFolderPath + fileName, "r")
            try:
                jsonDictionary = json.load(file)
                for merger in self.suddenChangeMergerList:
                    merger.AddPeakFile(jsonDictionary)
            except:
                print("There was a exception in ", fileName)
